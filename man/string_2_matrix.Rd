\name{string_2_matrix}
\alias{string_2_matrix_x}
\alias{string_2_matrix}
%- Also NEED an '\alias' for EACH other topic documented here.
\title{string_2_matrix
%%  ~~function to do ... ~~
}
\description{Creates an adjacency matrix
%%  ~~ A concise (1-5 lines) description of what the function does. ~~
}
\usage{
string_2_matrix(new_matrix, supplied_string, self = 0)
}
%- maybe also 'usage' for other objects documented here.
\arguments{
  \item{new_matrix}{The `new_matrix` element of the function should be either the matrix generated by `generate_adj_matrix()` or an empty data matrix of equal number of rows and columns. These should have unique values specified as the row names and column names.

%%     ~~Describe \code{new_matrix} here~~
}
  \item{supplied_string}{The `supplied_string` element refers to the string in which the search is to be performed. i.e `list = c('apples, pears, bananas', 'apples, bananas', 'apples, pears')`

%%     ~~Describe \code{supplied_string} here~~
}
  \item{self}{The `self` option specifies how to handle data when the specified object is found within a string. Default is 0. i.e. the adjacency matrix does not count it when the substring is found, only when the substring is found in combination with another unique substring.
%%     ~~Describe \code{self} here~~
}
}
\value{An adjacency matrix
%%  ~Describe the value returned
%%  If it is a LIST, use
%%  \item{comp1 }{Description of 'comp1'}
%%  \item{comp2 }{Description of 'comp2'}
%% ...
}

\author{Tom Drake
%%  ~~who you are~~
}
\note{Generating large matrices is computationally intensive and may take a while.
%%  ~~further notes~~
}

%% ~Make other sections like Warning with \section{Warning }{....} ~

\examples{
##Example
library(String2AdjMatrix)

#Start with character string to generate an adjacency matrix from
string_in = c('apples, pears, bananas', 'apples, bananas', 'apples, pears')

#Generate a new blank matrix
blank_matrix = generate_adj_matrix(string_in)

#Now fill the matrix
string_2_matrix(blank_matrix, string_in)
}
